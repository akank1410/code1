//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> indeg(V,0);
	    vector<int>ans;
	    
	    for(int i=0; i<V; i++)
	    {
	        for(auto x:adj[i])
	            indeg[x]++;
	    }
	    
	    queue<int> q;
	    for(int i=0; i<V; i++)
	    {
	        if(indeg[i]==0)
	            q.push(i);
	    }
	    
	    while(!q.empty())
	    {
	        int f = q.front();
	        ans.push_back(f);
	        q.pop();
	        
	        for(auto x:adj[f])
	        {
	            indeg[x]--;
	            if(indeg[x] == 0)
	                q.push(x);
	        }
	    }
	    
	    return ans;
	    
	}
};

//{ Driver Code Starts.

/*  Function to check if elements returned by user
*   contains the elements in topological sorted form
*   V: number of vertices
*   *res: array containing elements in topological sorted form
*   adj[]: graph input
*/
int check(int V, vector <int> &res, vector<int> adj[]) {
    
    if(V!=res.size())
    return 0;
    
    vector<int> map(V, -1);
    for (int i = 0; i < V; i++) {
        map[res[i]] = i;
    }
    for (int i = 0; i < V; i++) {
        for (int v : adj[i]) {
            if (map[i] > map[v]) return 0;
        }
    }
    return 1;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int N, E;
        cin >> E >> N;
        int u, v;

        vector<int> adj[N];

        for (int i = 0; i < E; i++) {
            cin >> u >> v;
            adj[u].push_back(v);
        }
        
        Solution obj;
        vector <int> res = obj.topoSort(N, adj);

        cout << check(N, res, adj) << endl;
    }
    
    return 0;
}
// } Driver Code Ends


/*

0:       2  0
1: 3     1  0
2: 3     1  0
3:       2
4: 0,1   0 
5: 0,2   0


4 5
*/

/*
update the indegree
declare a queue
traverse a loop and check for nodes with indeg =0 and push them into queue

start a while loop
	pop a eleemnt from queue
	push the pop node into ans vector
	traverse all the node on which pop node is directed and decrement the indeg of all those nodes
	and if the indeg after decrementing is =0 push them to  queue
	*/
