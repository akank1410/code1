https://leetcode.com/problems/next-greater-element-i/discuss/2488518/C++-solution-or-3solutions:-Brute-Force:-26msor-Stack:-17ms-or-Index_based:-6ms

Trival:
Runtime:26 ms	Memory:8.4 MB

    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
     
        vector<int> ans;                    // stroing final solution

        
        for(int i=0; i<nums1.size(); i++)
        {   
            int flag=0;
            int idx;
            for(int j=0; j<nums2.size(); j++)
            {
                if(nums1[i] == nums2[j])
                {
                    idx = j;
                    break;
                }
            }
            
            if(idx == nums2.size()-1){
                ans.push_back(-1);
                continue;}
            
            for(int k=idx+1; k<nums2.size(); k++)
            {
                if(nums1[i]<nums2[k])
                { ans.push_back(nums2[k]); flag=1;
                    break;}
            }
            
            if(flag==0)
                ans.push_back(-1);
        }
        return ans;
    }
    
    
    ---------------------
    
    OPTIMIZED
    
    Runtime:6 ms	Memory:9.4 MB
 
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
    
    unordered_map<int ,int> m; // for storing the number of index the next gretest element is far from current element
    unordered_map<int,int> index_map; // for mapping the element and its index
    vector<int> ans;                    // stroing final solution
    int size2=nums2.size();
    
    
    for(int i=0; i<size2-1;i++)
    {
        m[nums2[i]] = 1; //mapping 1 for all the elements of nums2 from 0 to size2-1 and last element with -1
        index_map[nums2[i]] = i; // mapping elements with index
    }
    index_map[nums2[size2-1]] = size2-1;
    m[nums2[size2-1]] = -1;

    // logic
    for(int i=size2-2; i>=0; i--)
    {
        int b=i+1,count=1;
        
        while(! (nums2[i] < nums2[b]))
        {
            if(m[nums2[b]] == -1)
            {
                count=-1;
                break;
            }
            
            count += m[nums2[b]];
            b += m[nums2[b]];
                
        }
        
        m[nums2[i]] = count;
    }
    
    // query
    for(auto x:nums1)
    {
        int index = index_map[x];
        
        if(m[nums2[index]] == -1) 
        ans.push_back(-1);
        else
        ans.push_back(nums2[index + m[nums2[index]]]);
    }

    
    return ans;
}
