
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int height (TreeNode* node , int &dia)
    {
        if(node == NULL)
            return 0;
        else
        {
            /* compute the height of each subtree */
            int lheight = height(node->left, dia);
            int rheight = height(node->right, dia);
            
            dia = max(lheight+rheight, dia);
          return max(lheight,rheight) + 1;
        }
    }
    
    int diameterOfBinaryTree(TreeNode* root) 
    {
        
        int dia = 0;
        height(root, dia);
        return dia;
        
    }
};

-----------------------------------------------------

https://leetcode.com/problems/diameter-of-binary-tree/discuss/2415264/O(n)-solution

https://leetcode.com/problems/diameter-of-binary-tree/discuss/2414907/VERY-simple-DFS
