METHOD1:

class Graph{
public: 
        map<int, bool> visited;
        mao<int, list<int>> adj;
        
        //function to add an edge to graph
        void addEdge(int v, int w);
        
        //DFS traversal of the vertices reachable from v
        void DFS(int v);
};

void Graph:: addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v's list.
}

void Graph::DFS(int v)
{
  //Mark the current node visited and print it
  visited[v] = true;
  cout<<v<<" ";
  
  // Recur for all the vertices adjacent to this vertex
  list<int>::iterator i;
  for(i = adj[v].begin(); i != adj[v].end(); i++)
      if(!visited[*i])
          DFS(*i);
}

//Driver Code
int main()
{
  //Create a graph 
  Graph g;
  g.addEdge(0,1);
  g.addEdge(0,2);
  g.addEdge(1,2);
  g.addEdge(2,0);
  g.addEdge(2,3);
  g.addEdge(3,3);
  
  cout<<"Following is Depth First Traversal (starting from vertex 2) \n";
  
  g.DFS(2);
  
  return 0;
}

-----------------------*****_------------------------------

// HANDLING A DISCONNECTD GRAPH

class Graph {
  // A function used by DFS
  void DFSUtil(int v);
  
public:
  map<int,bool> visited;
  map<int list<int>> adj;
  
  //function to add an edge to graph
  void addEdge(int v, int w);
  
  //print DFS traversal of the complete graph
  void DFS();
};

voif Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); //Add w to v's list.
}

void Graph::DFSUtil(int v)
{
  //Mark the current node as visited & print it
  visited[v] = true;
  cout<<v<<" ";
  
  //Recur for all the vertices adjacent to this vertex
  list<int>::iterator i;
  for(i = adj[v].begin(); i != adj[v].end(); i++)
        if(!visited[*i])
          DFSUtile(*i);
          
  //The function to do DFS traversal. It uses recursive DFSUtil()
  void Graph::DFS()
  {
  
      //Call the recursive helper function to print DFS traversal starting from all vertices one by one
      for(auto i: adj)
        if(visited[i.first] == false)
            DFSUtile(i.first);
 }
 
//Driver Code
int main()
{
  //Create a graph 
  Graph g;
  g.addEdge(0,1);
  g.addEdge(0,2);
  g.addEdge(1,2);
  g.addEdge(2,0);
  g.addEdge(2,3);
  g.addEdge(3,3);
  
  cout<<"Following is Depth First Traversal (starting from vertex 2) \n";
  
  g.DFS();
  
  return 0;
}
