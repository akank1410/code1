

// Iterative

    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
       
        //ListNode* temp1=list1, *temp2 = list2, *temp;
        ListNode *temp1 = list1;   ListNode *temp2 = list2; ListNode *temp;
        ListNode* head;
        
        if(list1 == NULL && list2 == NULL)
            return NULL;
        else if(list1 == NULL)
            return list2;
        else if(list2 == NULL)
            return list1;
        
        if(list1->val <= list2->val)
        { head = list1; temp1=temp1->next; }
        else
        { head = list2; temp2=temp2->next; }
        
        temp= head;
        
        while(temp1 != NULL && temp2 != NULL)
        {
            if(temp1->val <= temp2->val)
                { temp->next = temp1; temp1 = temp1->next; temp = temp->next; }
            else
                { temp->next = temp2; temp2 = temp2->next; temp = temp->next;}
        }
        
        if(temp1 != NULL)
            temp->next = temp1;
        else
            temp->next = temp2;
        
        return head;
    }
    
    ====================================================================
    // Recursie
    // 27ms, 14.8MB
    
        void merge(ListNode* l1, ListNode* l2, ListNode* &temp)
    {
        if(l1 == NULL) {temp = l2; return;}
        if(l2 == NULL) {temp = l1; return;}
        
        
        if(l1->val <= l2->val)
        {
            temp = l1;
            l1 = l1->next;
        }
        else
        {
            temp = l2;
            l2 = l2->next;
        }
        
        cout<<temp->val<<" ";
        merge(l1, l2, temp->next);
        
    }
    
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
       
        ListNode *temp, *head;
        if(list1 == NULL) return list2;
        else if(list2 == NULL) return list1;
        else if(list1->val <= list2->val)
            head = list1;
        else
            head = list2;
        merge(list1, list2, temp);
        
        return head;
    }
    
