Method1:

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        
        int n= nums.size();
        vector<int> dp(n,1);
        
        for(int i=1;i<n;i++)
        {
            for(int j=0; j<i; j++)
            {
                if(nums[i]>nums[j])
                    dp[i] = max(dp[i], dp[j]+1);
                
            }
        }
        
        return *max_element(dp.begin(), dp.end());
        
    }
};


O(n^2)

Array increasing subsequence will be stored at dp[i] but the catch is that the longest subsequence should end at i
---------------------------------------------------------

Method2:

