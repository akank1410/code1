//The board needs to be updated simultaneously. You cannot update some cells first and then 
//use their updated values to update other cells
// for in-place : while processing, store the updated/new value of th eboard into 1st bit while current board value in 0th bit.


class Solution {
public:
    
  int check(vector<vector<int>> b, int x, int y)
{       
        int sum = 0;
        int r_size = b.size(); //rows_size
        int c_size = b[0].size(); //columns_size
        for(int i = x-1; i <= x+1; i++)
        {    
            if( !(i>=0)  || !(i < r_size) )
            continue;
        
            for(int j = y-1; j <= y+1; j++)
            {
                if(  !(j>=0) || !(j < c_size))
                continue;
                

                         if( !(i==x) || !(j==y) )
                {
                  
                    if(b[i][j] %10 == 1)
                    {
                        sum++;}
                }   


       
            }
        }
  
  return b[x][y] + sum*10;

           
}
    
void gameOfLife(vector<vector<int>>& board) {
        

        int n = board[0].size();    //no. of columns
        int m = board.size();       //no. of rows
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
     // 1. corner_case = (0,0), (0,n), (m,0), (m,n) => 3 blocks to check
     // 2. edge_case   = (0,1)-(0,n-1); (1,0)-(m-1,0); (1,n)-(m-1,n); (m,1)-(m,n-1) 
     // 3. rest = (x-1,y-1), (x-1,y), (x-1,y+1), (x,y+1), (x+1,y+1), (x+1,y), (x+1,y-1), (x,y-1)
             board[i][j] = check(board, i, j);
        
            }
            
        }

        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j] == 21 || board[i][j]/10 == 3)
                board[i][j]=1;
                else
                board[i][j]=0;
            }
        }
}

};
