REFERECNE LINK: https://leetcode.com/problems/pacific-atlantic-water-flow/discuss/2406290/C%2B%2B-oror-BFS-oror-Easy-to-Understand
concept of bfs

class Solution {
public:
    
    void bfs(int m, int n, queue<pair<int,int>>& q, vector<vector<int>>& heights, vector<vector<bool>>& visited)
    {
        int rowOffset[] = {0,0,1,-1};
        int colOffset[] = {1,-1,0,0};
        
        int currHeight;
        int cx,cy;
        int px,py;
        
        while(!q.empty())
        {
            cx = q.front().first;
            cy = q.front().second;
            currHeight = heights[cx][cy];
            q.pop();
            
            for(int k=0; k<4; k++)
            {
                px = rowOffset[k] + cx;
                py = colOffset[k] + cy;
                
                if(px>=0 && px<m && py>=0 && py<n && heights[px][py] >= currHeight && !visited[px][py])
                {
                    visited[px][py] = true;
                    q.push({px,py});
                }
            }
        }
    }
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
        vector<vector<int>> res;
        
        int m = heights.size();
        int n = heights[0].size();
        
        if(m==0 || n==0)
            return res;
        
        vector<vector<bool>> atlanticVisited(m, vector<bool>(n,false));
        vector<vector<bool>> pacificVisited(m , vector<bool>(n,false));
        
        queue<pair<int,int>> q;
        
        for(int i=0;i<n;i++)
        {
            if(!pacificVisited[0][i])
            {
                pacificVisited[0][i] = true;
                q.push({0,i});
            }
        }
        
        for(int i=1;i<m;i++)
        {
            if(!pacificVisited[i][0])
            {
                pacificVisited[i][0] = true;
                q.push({i,0});
            }
        }
        
        bfs(m,n,q,heights,pacificVisited);
        
        
        for(int i=0;i<n;i++)
        {
            if(!atlanticVisited[m-1][i])
            {
                atlanticVisited[m-1][i] = true;
                q.push({m-1,i});
            }
        }
        
        for(int i=0;i<m-1;i++)
        {
            if(!atlanticVisited[i][n-1])
            {
                atlanticVisited[i][n-1] = true;
                q.push({i,n-1});
            }
        }
        
        bfs(m,n,q,heights,atlanticVisited);
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(pacificVisited[i][j] && atlanticVisited[i][j])
                {
                    res.push_back({i,j});
                }
            }
        }
        
        return res;
    }
};
