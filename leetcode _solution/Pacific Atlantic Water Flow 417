//DFS
//Runtime: 88 ms, faster than 35.05% of C++ online submissions for Pacific Atlantic Water Flow.
//Memory Usage: 17.5 MB, less than 88.01% of C++ online submissions for Pacific Atlantic Water Flow.
class Solution {
public:
    
    vector<array<int,2>> adj = {{0,1}, {1,0}, {-1,0}, {0,-1}};
    
    void dfs(vector<vector<int>>& heights, int r, int c, int x, int y, vector<vector<bool>>& vis)
    {
        vis[x][y] = true;
        
        for(auto a : adj)
        {
            int i = x + a[0], j = y + a[1];
            if(i>=0 && i<r && j>=0 && j<c && heights[i][j] >= heights[x][y] && !vis[i][j])
                dfs(heights, r, c, i, j, vis);
        }
    }
 
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
    
        int r = heights.size(), c = heights[0].size();
        vector<vector<bool>> pacific (r,vector<bool>(c,false));
        vector<vector<bool>> atlantic (r,vector<bool>(c,false));
        queue<pair<int,int>> q;
        vector<vector<int>> ans;
        
        if(r==0 || c==0)
            return ans;
        
        for(int i=0; i<r; i++)
            dfs(heights, r, c, i, 0, pacific);
        
        for(int i=1; i<c; i++)
            dfs(heights, r, c, 0, i, pacific);
        
        for(int i=0; i<r; i++)
            dfs(heights, r, c, i, c-1, atlantic);
        
        for(int i=0; i<c-1; i++)
            dfs(heights, r, c, r-1, i, atlantic);
        
        for(int i=0; i<r; i++)
        {
            for(int j=0; j<c; j++)
            {
                if(pacific[i][j] && atlantic[i][j])
                    ans.push_back({i,j});
            }
        }

        return ans;
    }
};


-------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------

REFERECNE LINK: https://leetcode.com/problems/pacific-atlantic-water-flow/discuss/2406290/C%2B%2B-oror-BFS-oror-Easy-to-Understand
concept of bfs
//Runtime: 65 ms, faster than 63.68% of C++ online submissions for Pacific Atlantic Water Flow.
//Memory Usage: 18.1 MB, less than 64.16% of C++ online submissions for Pacific Atlantic Water Flow.

class Solution {
public:
    
    void bfs(int m, int n, queue<pair<int,int>>& q, vector<vector<int>>& heights, vector<vector<bool>>& visited)
    {
        int rowOffset[] = {0,0,1,-1};
        int colOffset[] = {1,-1,0,0};
        
        int currHeight;
        int cx,cy;
        int px,py;
        
        while(!q.empty())
        {
            cx = q.front().first;
            cy = q.front().second;
            currHeight = heights[cx][cy];
            q.pop();
            
            for(int k=0; k<4; k++)
            {
                px = rowOffset[k] + cx;
                py = colOffset[k] + cy;
                
                if(px>=0 && px<m && py>=0 && py<n && heights[px][py] >= currHeight && !visited[px][py])
                {
                    visited[px][py] = true;
                    q.push({px,py});
                }
            }
        }
    }
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
        vector<vector<int>> res;
        
        int m = heights.size();
        int n = heights[0].size();
        
        if(m==0 || n==0)
            return res;
        
        vector<vector<bool>> atlanticVisited(m, vector<bool>(n,false));
        vector<vector<bool>> pacificVisited(m , vector<bool>(n,false));
        
        queue<pair<int,int>> q;
        
        for(int i=0;i<n;i++)
        {
            if(!pacificVisited[0][i])
            {
                pacificVisited[0][i] = true;
                q.push({0,i});
            }
        }
        
        for(int i=1;i<m;i++)
        {
            if(!pacificVisited[i][0])
            {
                pacificVisited[i][0] = true;
                q.push({i,0});
            }
        }
        
        bfs(m,n,q,heights,pacificVisited);
        
        
        for(int i=0;i<n;i++)
        {
            if(!atlanticVisited[m-1][i])
            {
                atlanticVisited[m-1][i] = true;
                q.push({m-1,i});
            }
        }
        
        for(int i=0;i<m-1;i++)
        {
            if(!atlanticVisited[i][n-1])
            {
                atlanticVisited[i][n-1] = true;
                q.push({i,n-1});
            }
        }
        
        bfs(m,n,q,heights,atlanticVisited);
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(pacificVisited[i][j] && atlanticVisited[i][j])
                {
                    res.push_back({i,j});
                }
            }
        }
        
        return res;
    }
};

----------------------------------------------------------------------------------------

//DFS

class Solution {
public:
    void check(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& vis, bool& atl, bool& pac)
    {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<array<int,2>> dir = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        bool ans =false;
        
        if(i==m-1 || j==n-1) atl = true;
        if(i==0 || j==0) pac=true;
        
        if(pac && atl) return;
        
        for(auto el:dir)
        {
            int r = i + el[0], c = j + el[1];
            if(r>=0 && r<m && c>=0 && c<n)
            {
                if(grid[r][c] <= grid[i][j] && !vis[r][c] )
                {
                    vis[r][c] = true;
                    check(grid,r,c,vis,atl,pac);
                    vis[r][c] = false;
                }
            }
        }
        return;
    }
    
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
      vector<vector<int>> res;
        bool atl=false, pac=false;
        
        int m = heights.size();
        int n = heights[0].size();
        
        vector<vector<bool>> vis(m, vector<bool>(n,false));
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                atl = false; pac = false;
                check(heights, i, j, vis, atl, pac);
                if(atl && pac)
                {
                    vector<int> v1={i,j};
                    res.push_back(v1);
                }
            }
        }
        return res;
    }
};

//https://leetcode.com/problems/pacific-atlantic-water-flow/discuss/2385551/c%2B%2B-oror-easy-oror-dfs
