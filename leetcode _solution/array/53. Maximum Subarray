// METHOD 1: (Kadane algorithm) TC O(n) : SC O(1)
// Runtime: 127 ms, faster than 86.79% of C++ online submissions for Maximum Subarray.
// Memory Usage: 67.7 MB, less than 53.81% of C++ online submissions for Maximum Subarray.
    int maxSubArray(vector<int>& nums) {
        
        int sum=0, m = INT_MIN;
        
        for(int i=0; i<nums.size(); i++)
        {
            sum += nums[i];
            m = max(m,sum);
            sum = max(0,sum);
        }
        return m;
    }

=================================================================================

//METHOD 2 :
// Runtime: 174 ms, faster than 50.53% of C++ online submissions for Maximum Subarray.
// Memory Usage: 67.8 MB, less than 10.96% of C++ online submissions for Maximum Subarray.

// conditon : checking if the( prev sum + curr no. sum < cur no. => sum=0)

    int maxSubArray(vector<int>& nums) {
        
        int sum=0, m = INT_MIN;
        
        for(int i=0; i<nums.size(); i++)
        {
            if(sum + nums[i] < nums[i])
                sum=0;
            
            sum += nums[i];
            m = max(m,sum);
        }
        return m;
    }
