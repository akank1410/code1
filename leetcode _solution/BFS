// Generic Function for BFS traversal of a Graph
// (valid for directed as well as undirected graphs
// which can have multiple disconnected components)

// ***********INTPUT**********
// V - reresents number of vertices in the Graph
// adj[] - represents adajency list for the Graph

// ************OUTPUT*********
// bfs_traversal - a vector containing bfs traversal for entire graph
// ***************************

vector<int> bfsOfGraph(int v, vector<int> adj[])
{
  vector<int> bfs_traversal;
  vector<bool> vis(V, false);
  for (int i=0; i<V; i++)
  {
    if(!vis[i]) {
      queue<int> q;
      vis[i] = true;
      q.push(i);
      while (!q.empty()) {
        int g_node = q.front();
        q.pop();
        bfs_traversal.pysh_back(g_node);
        for(auto it : adj[g_node]) {
          if(!vis[it]) {
            vis[it] = true;
            q.push(it);
            }
          }
        }
    }
  }
  return bfs_traversal;
 }
 
 //**************************************************************************//
 
 class Graph
 {
   int V;                 // No. of Vertices
   vector<list<int>>adj;  //Pointer to an array containing adjacency lists
 public:
    Graph(int V);  //Constructor
    
    // function to add an edge to graph
    void addEdge(int V, int w)
    
    // print BFS traversal from a given source s
    void BFS(int s);
   };
   
   Graph::Graph(int V)
   {
    this->V = V;
    adj.resize(V);
   }
   
   void Graph::addEdge(int v, int w)
   {
     adj[v].push_back(w);  // Add w to v's list
   }
   
   void Graph::BFS(int s)
   {
      // Mark all the vertices as not visited
      vector<bool> visited;
      visited.resize(V,false)l
      
      //Create a queue for BFS
      list<int> queue;
      
      // Mark the current node as visited and enqueue it
      visited[s] = true;
      queue.push_back(s);
      
      while(!queue.empty())
      {
          //Dequeue a vertex from queue and enqueue it
          s = queue.front();'
          cout<<s<<" ";
          queue.pop_front();
          
          // Get all adjacent vertices of the dequeued vertex s
          //If a adjacent has not been visited, then mark it visited and enqueue it
          for(auto adjecent: adj[s])
          {
            if(!visited[adjacent])
            {
              visited[adjecent] = true;
              queue.push_back(adjecent);
             }
          }
       }
   }
   
   int main()
   {
   
      //Create a graph given 
      Graph g(4);
      g.addEdge(0,1);
      g.addEdge(0,2);
      g.addEdge(1,2);
      g.addEdge(2,0);
      g.addEdge(2,3);
      g.addEdge(3,3);
      
      g.BFS(2);
      
      return 0;
   }
