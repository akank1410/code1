22 ms	9.8 MB

class Solution {
public:
    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) 
    {
        
        unordered_map<int, vector<int>> v;

        int n = mat.size(); //rows
        int m = mat[0].size(); //columns
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                v[i-j].push_back(mat[i][j]);
            }
        }
        
        for(auto x:v)
        {
           sort( v[x.first].begin(), v[x.first].end());
        }
        
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                mat[i][j] = v[i-j][0];
                 v[i-j].erase(v[i-j].begin());
            }
        }
        
        return mat;
    }
};

/*
    0   1   2   3   4   5 
0  11  25  66  01  69  07
1  23  55  17  45  15  52
2  75  31  36  44  58  08
3  22  27  33  25  68  04
4  84  28  14  11  05  50

r-c
 0 11 55 36 25 05 => 05 11 25 36 55
-1 25 17 44 68 50 => 17 25 44 50 68
-2 66 45 58 04    => 04 45 58 66
-3 01 15 08       => 01 08 15
-4 69 52          => 52 69
-5 07             => 07
 1 23 31 33 11    => 11 23 31 33
 2 75 27 14       => 14 27 75
 3 22 28          => 22 28
 4 84             => 84
 
 no. of diagonals = n + m -1
 Step 1 push the elements in different vector as per there differenc
 Step 2 sort each vector n + m-1
 05 17 04 01 52 07
 11 11 25 45 08 69
 14 23 25 44 58 15
 22 27 31 36 50 66 
 84 28 75 33 55 68
        
// All cells in the samw diagonal (i,j) have the same difference so we can get the diagonal of a cell
// using the difference i-j
        
40
30  41
20  31  42
10  21  32  43
00  11  22  33  44
        
01  12  23  34  45
02  13  24  35
03  14  25
04  15
05
    
n=5 m=6
1. n: rows , m: columns
2. no. of diagonals: i = 0 to n-1 , j | i , j = 1 to m-1
    
for(int i=0; i<n; i++)
{
    for(int j=n-1-i,k=0; j<n; j++,k++)
        cout<<j<<k" "<<;
    cout<<endl;
}

- pusing element to vector one by one m*n O(1) 
  pushing elements from vector to priority queue m+n-1 * O(n)
  
 - using priority queue - m*n (log n)
 
 pop element log(n) * m*n;
 
 ======================================================
 


==========================

        
        unordered_map<int, vector<int>> v;

        int n = mat.size(); //rows
        int m = mat[0].size(); //columns
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                v[i-j].push_back(mat[i][j]);
            }
        }
        
        for(int i=0; i<v.size(); i++)
        {
           sort( v[i].begin(), v[i].end());
        }
        
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                mat[i][j] = v[i-j][0];
                 v[i-j].erase(v[i-j].begin());
            }
        }
  
*/
