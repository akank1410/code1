TC : 0.27/1.5

    long long trappingWater(int arr[], int n){
        // code here
        
        vector <int> max_left(n), max_right(n);
        max_left[0] = arr[0];
        max_right[n-1] = arr[n-1];
        long long sum=0;
        
        for(int i=1; i<n; i++)
        max_left[i] = max(max_left[i-1], arr[i]);
        
        for(int j=n-2; j>=0;  j--)
        max_right[j] = max(max_right[j+1],arr[j]);
        
        for(int i=0;i<n;i++)
        sum += min(max_right[i],max_left[i]) - arr[i];
        
        return sum;
        
        
    }
    
    
METHOD 2:

    def trappingWater(self, arr,n):
        #Code here
        
        left_max = [arr[0]];
        right_max = [];
        
        for i in range(n-1):
            right_max.append(0)
            
        right_max.append(arr[n-1])
        
        for i in range(1,n):
            left_max.insert(i, max(left_max[i-1],arr[i]))
        
        for i in range(n-2,-1,-1):
            right_max[i] = max(right_max[i+1], arr[i])
            
        sum =0
        
        for i in range(0,n):
            sum += min(left_max[i], right_max[i]) - arr[i]
            
        return sum
