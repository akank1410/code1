METHOD 1.  TC -> 0.56/1.38   
  
  int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
    	
       	sort(arr,arr+n);
    	sort(dep,dep+n);
    	unordered_map<int,int>a;
    	 
a[0] = dep[0];
int c=0; 
int alert=1; //notify that no platform is available for new train

for(int i=1; i<n; i++)
{
    int count=0; alert=1;
	while(count<=c)
	{	    
	//At any instance, same platfomr Cannot be used for both departure of a train & arrival of another train
		if(arr[i] <= a[count])
			count++;
		else
		{
			a[count]=dep[i];
			alert = 0;
			break;
		}	
	}

	if(alert == 1)
	{
		c++;
		a[c] = dep[i];
	}

}
return c+1;
    }

METHOD 2:

 from heapq import heapify,heappop,heappush
 
 class Solution:
 	def minimumPlatform(self, n, arr, dep):
		#sort by arrival time
		arr, dep = zip(*sorted(zip(arr, dep), key = lambda x:x[0]))
		
		platfomrs = [dep[0]]
		#a min heap storing the platfomrs sorted by the greates departure time so that we can
		#greadily try to  reuse the platform for a new train
		heapify(platforms)
		count = 1
		
		for i in range(1,n):
			free_at = heappop(platforms)
			
			#if the arrival time of new train is after the depature time of the train
			#using the platfomr, we re-use the platform
			if free_at < arr[i]:
				heappush(platfomrs,dep[i])
			else:
			# that platform is busy, hence we need to create a new platform for the
			# curr train
				count + =1
				heappush(platforms, free_at)
				heappush(platfomrs,dep[i])
-----------------------------------------------------------------------------------------

METHOD 3:

	METHOD 3:

static bool cmp(pair<int,int> a, pair<int,int> b){
	return a.first < b.first;
}

public:
int findPlatfomr(int arr[], int dep[], int n)
{
	vector< pair<int,int>> plats;	
	vector< pair<int,int>> times(n);

	for(itn i=0; i<n; i++)
		times[i] = {arr[i], dep[i]);

	sort(times.begin(), times.end(), cmp);
	int c = 1;

	for(int i=0; i<n; i++)
	{
	 
          if(plat.size() == 0)
	  {pair<int,int> p = {c, times[i].second};
	  plats.push_back(p);}
	  else
	  {
	   int j;
	   for(j=0; j<plats.size(); j++){
		if(plats[j]

-------------------------------------------------------

METHOD 4:

{
vector< pair<int,int>> v;
for(int i=0; i<n; i++)
v.push_back({arr[i],dep[i]});

sort(v.begin(), v.end());

int s = v[0].first;
int e = v[0].second;
int c = INT_MIN;
int d=1;

for(int i=1; i<n; i++)
{
	if(v[i].first < e)
	{e = max(e, v[i].second);
	d++;}
	else
	{ c= max(c,d);
	  d--;
	  s = v[i].first;
	  e = v[i].second;
	}
}
return max(c,d);
}


--------------------------------------------------

			
