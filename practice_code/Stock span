SITE: https://practice.geeksforgeeks.org/problems/stock-span-problem-1587115621/1

METHOD 1 L TC 1.23/2.32

vector <int> calculateSpan(int arr[], int n)
    {
       // Your code 
       vector <int> v {1};
       stack <int> stack;
       stack.push(-1);
       stack.push(0);
       int index=0;
       
       for(int i=1;i<n;i++)
       {//0 1 5
           
            if(arr[i]<arr[i-1])
            { stack.push(i);v.push_back(1); }
            else{
            int span1;
            int span2;
            int netspan=0;
            
            while(stack.size() != 1  && arr[stack.top()]<=arr[i])
            {
            
            if(stack.size() == 1)
            {
            netspan = netspan+1;
            stack.pop();
            }
            else
                {
            span1 = stack.top();
            stack.pop();
            span2 = stack.top();
            netspan = netspan+span1-span2;
                }
            }
            
            stack.push(i);
            v.push_back(netspan+1);
                
            }

       }
       return v;
    }
    
 =-----------------------------------------------
 
 METHOD 2 : 1.04/2.32
 
     vector <int> calculateSpan(int price[], int n)
    {
       // Your code 
       stack<int> s;
       vector<int> span(n,1);
       
       for(int i=0; i<n; i++)
       {
           while(!s.empty() && price[s.top()] <= price[i]){
               span[i] += span[s.top()];
               s.pop();
           }
           s.push(i);
       }
       return span;
    }
    
    
 -------------
 
 POINTS TO KEEP IN MIND
 
 1. use vector <int> v (1,n) to initialize the output.
 2. Good methods
 3. The elements absent in the middle of stack means that they are the right index after the missing 
 index's element is greater than the missing elemnt after it in consecutive.
 
