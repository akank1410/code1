    def doUnion(self,a,n,b,m):
        
        #code here
    
        new = a+b
        //return(len(np.unique()))
        s=set(new)
        
        return len(s)
        =====
        
        REFERENCE:
        https://www.geeksforgeeks.org/python-get-unique-values-list/
        
        
        
        -------------------
        
        
        METHOD2 : c++ USING LISTS
        
            int doUnion(int a[], int n, int b[], int m)  {
        //code here
        
        int arr[n+m];
        merge(a,a+n,b,b+m,arr);
        list<int> lis(arr,arr+n+m);
        lis.sort();
        lis.unique();
        return lis.size();
    }
    
    REFERENCE:
    https://www.geeksforgeeks.org/list-unique-in-c-stl/
    https://www.techiedelight.com/convert-array-list-cpp/
    1.29/13 time complexity
    
    
    METHOD 3: USING unorderd_set
        int doUnion(int a[], int n, int b[], int m)  {
        //code here
        
        unordered_set<int> s;
        
        for(int i=0;i<n;i++)
        {
            s.insert(a[i]);
        }
        
        for(int i=0;i<m;i++)
        s.insert(b[i]);
        
        return s.size();
    }
    
    Time Complexity: 0.8/14
    
    ============
    unordered_set<int>h(a,a+n);
        for(int i=0;i<m;i++)
            h.insert(b[i]);
         return s.size();
         
    TIME COMPLEXITY: 0.76/14
    
    
    
