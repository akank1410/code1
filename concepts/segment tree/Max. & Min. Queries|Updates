//REFERENCE: https://www.youtube.com/watch?v=payOcHP24NY&ab_channel=ApnaCollege

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5+2;
int tree [4*N];
int a[N];

void built(int node, int st, int en)
{
    // base case
    if(st == en)
    {
        tree[node] = a[st];
        return;
    }

    //find the mid and apply divide and conquer
    int mid = (st+en)/2;

    built(2*node, st, mid);
    built(2*node+1, mid+1, en);

    // after the 2 child nodes are created
    // update the current node
    tree[node] = max(tree[2*node], tree[2*node+1]);
}

// starting node, starting and ending of the array, range of subarray
// no overlap:
// st...en l...r
// l...r st...en
// complete overlap
//l st...en r
//partial overlap:
// l st r en
// st l en r
// l and r of node representing the segment
int query(int node, int st, int en , int l, int r)
{
    // segments are not at all overlapping
    if(st>r || en<l)
        return INT_MIN;

    // complete overlap
    if( l <= st && en <= r)
        return tree[node];

    //in case of partial overlap, find the mod and then 2*node, and 2*node+1 
    int mid = (st+en)/2;

    int q1 = query(2*node, st, mid, l, r); // left child query segment from start to mid
    int q2 = query(2*node+1, mid+1, en, l, r);// right child query segment from mid+1 to en

    return max(q1,q2);

}

void update(int node, int st, int en, int index, int val)
{
    // base case
    if(st == en)
    {
        a[st]  = val;
        tree[node] = val;
        return;
    }

    // applying binary search
    int mid = (st+en)/2;

    if(index <= mid)
        update(2*node, st, mid, index, val);
    else
        update(2*node+1, mid+1, en, index, val);

    //once the value required is update then we need to do backtracking and apply max of(2*node, 2*node+1)
    tree[node] = max(tree[2*node], tree[2*node+1]);
}

signed main() {

    int n;
    cin>>n;

    for(int i=0; i<n; i++)
        cin>>a[i];

    built(1, 0, n-1);
    for(int i=1;i<(2*n);i++)
    cout<<tree[i]<<" ";
    cout<<endl;
    while(1)
    {
        int type;
        cin>>type;
        if(type==-1)
        break;
        else if(type==1)
        {
                int l,r;
                cin>>l>>r;
                int ans = query(1, 0, n-1, l, r);
                cout<<"query : "<<ans<<endl;
        }
        else if(type == 2) //index and updated value
        {
                int index,val;
                cin>>index>>val;
                update(1,0,n-1,index,val);
                cout<<query(1,0,n-1,0,n-1)<<endl;
        }
    }

    for(int i=1;i<(2*n);i++)
    cout<<tree[i]<<" ";
    return 0;
}

/*INPUT
9
6 8 -1 2 17 1 3 2 4
1
2 6
2 
7 18
-1
*/
