// Level order traversal, current nodes in a level, height

#include <bits/stdc++.h>
using namespace std;

class node
{
    public:
    int data; 
    node *left, *right;

    node(int val){
        data = val;
        left=NULL; right=NULL;
    }
};

node* newNode(int data)
{
    node* Node = new node(data);
    return Node;
}

int height (node* node)
{
    if(node == NULL) return 0;
    else
    {
        int lheight = height(node->left);
        int rheight = height(node->right);

        return max(lheight,rheight) + 1;
    }
}

void printCurrentLevel(node* root, int level)
{
    if(root == NULL) {cout<<"NULL ";return;}
    if(level == 1) cout<<root->data<<" ";
    else if(level>1)
    {
        printCurrentLevel(root->left, level-1);
        printCurrentLevel(root->right, level-1);
    }
}

void printLevelOrder(node* root)
{
    int h = height(root);
    for(int i=1; i<=h; i++)
        {cout<<"\nLEVEL "<<i<<"\n";
        printCurrentLevel(root,i);}
}

int main() {
    
    node* root = newNode(1);
    //node* root = new node(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->right = newNode(4);
    root->left->left = newNode(5);

    
    cout<<"Level Order Traversal Of Binary Tree Is \n";
    printLevelOrder(root);
    return 0;
}
