find () : find the root of the given vertex
union() : connects the element x & y together & changes the root nodes to be same and chooses one of them
to be the parent vertex.
unions 2 vertices and makes their root nodes the same.

UNIONFIND

UnionSet() : O(n)
find() : O(1)
connected() : O(1)

#include <bits/stdc++.h>
using namespace std;

class UnionFind
{
        public:
                UnionFind(int size) : root(size)
                {
                    for(int i=0; i<size; i++)
                    root[i] = i;
                }

                int find(int x) { return root[x];}

                void UnionSet(int x, int y)
                    {
                        int rootX = find(x);
                        int rootY = find(y);
                        if(rootX != rootY)
                        {
                            for(int i=0; i<root.size(); i++)
                            {
                                if(root[i] == rootY)
                                    root[i] = rootX;
                            }
                        }
                    }

                    bool connected(int x, int y)
                    { return find(x) == find(y);}

        private:
            vector<int> root;

};

int main() {
    
    cout<<boolalpha;
    UnionFind uf(10);

    uf.UnionSet(1,2);
    uf.UnionSet(2,5);
    uf.UnionSet(5,6);
    uf.UnionSet(6,7);
    uf.UnionSet(3,8);
    uf.UnionSet(8,9);
    cout<<uf.connected(1,5)<<endl;
    cout<<uf.connected(5,7)<<endl;
    cout<<uf.connected(4,9)<<endl;
    uf.UnionSet(9,4);
    cout<<uf.connected(4,9)<<endl;

    return 0;
}
--------------------------------------------------------

UnionFind
--------

class UnionFind {
public:
    UnionFind(int sz) : root(sz) {
        for (int i = 0; i < sz; i++) {
            root[i] = i;
        }
    }

    int find(int x) {
        while (x != root[x]) {
            x = root[x];
        }
        return x;
    }

    void unionSet(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            root[rootY] = rootX;
        }
    }

    bool connected(int x, int y) {
        return find(x) == find(y);
    }

private:
    vector<int> root;
};

// Test Case
int main() {
    // for displaying booleans as literal strings, instead of 0 and 1
    cout << boolalpha;
    UnionFind uf(10);
    // 1-2-5-6-7 3-8-9 4
    uf.unionSet(1, 2);
    uf.unionSet(2, 5);
    uf.unionSet(5, 6);
    uf.unionSet(6, 7);
    uf.unionSet(3, 8);
    uf.unionSet(8, 9);
    cout << uf.connected(1, 5) << endl;  // true
    cout << uf.connected(5, 7) << endl;  // true
    cout << uf.connected(4, 9) << endl;  // false
    // 1-2-5-6-7 3-8-9-4
    uf.unionSet(9, 4);
    cout << uf.connected(4, 9) << endl;  // true

    return 0;
}

-----------------------------------------------------

UNION BY RANK
------------

class UnionFind
{
    public:
            UnionFind(int size): root(size), rank(size)
             {
                 for(int i=0; i<size; i++) 
                 {
                 root[i] = i;
                 rank[i] = 1;
                 }
             }

            int find(int x)
            {
                while(x != root[x])
                x = root[x];

                return x;
            }

            void unionSet(int x, int y)
            {
                int rootX = find(x); int rootY = find(y);
                if(rootX != rootY) 
                {
                    if(rank[rootX]>rank[rootY])
                    root[rootY] = rootX;
                    else if(rank[rootX] < rank[rootY])
                    root[rootX] = rootY;
                    else
                    {
                        root[rootY] = rootX;
                        rank[rootX] += 1;
                    }
                }
            }

            bool connected(int x, int y)
            { return find(x) == find(y);}
        
    private:
        vector<int> root;
        vector<int> rank;
            
};

	Union-find Constructor	Find	Union	Connected
Time Complexity	O(N)O(N)	O(\log N)O(logN)	O(\log N)O(logN)	O(\log N)O(logN)

--------------------------------------------------------
        https://leetcode.com/explore/featured/card/graph/618/disjoint-set/3880/
	
	
	============
	
	To implement disjoin sets. We will use the root array to store parent array or the vertex.
For the find function everytime we try to find the root node of a vertex, it needs to find a parent node, and the parent node of the
vertex. 

size represents no. of elements in the array that is the number of vertices.
root is initialize to have the size of the number of vertices. 

Since we have each vertex isolated by itself in the root array initially the root of each vertex will be itself. 

Quick Find Implementation of the Disjoint Set
-------------------------------------------------

class UnionFind
{
public:
		UnionFind(int sz) : root(size)
		{
			for(int i=0; i<size; i++)
				root[i] = i;
		}

		int find (int x)
		{ return root[x]; }

		void unionSet(int x, int y)
		{ int rootx = find(x);
		  int rooty = find(y);

		  if(rootx == rooty)
		  {
			for(int i=0; i < root.size(); i++)
			{	if(root[i] == rootY)	{ root[i] = rootX; }	}
		  }
		}
	
		bool connected(int x, int y)
		{ return find(x) == find(y);	}

											
